{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"cpu_frequency_scaling/","title":"CPU Frequency Scaling","text":"<p>Raspbian, by default, sets the CPU frequency to a fixed 700MHz. For use cases where maximum CPU power is not always needed, reducing the CPU frequency can be reasonable.</p> <p>The following steps describe how to lower the CPU frequency during idle times. (This may have limited effects, so consider it an exploration of technical interest.)</p>"},{"location":"cpu_frequency_scaling/#gpu-configuration","title":"GPU Configuration","text":"<p><code>/boot/config.txt</code> is read by the GPU before the CPU starts up, and it contains settings for CPU frequency as well. Add the following lines:</p> <pre><code># Enable CPU frequency scaling\nforce_turbo=0\n# Set minimum CPU frequency (default is 700)\narm_freq_min=100\n</code></pre> <p>A reboot is required for these changes to take effect.</p> <p>For more details, refer to: RPiconfig - eLinux.org</p>"},{"location":"cpu_frequency_scaling/#linux-kernel-configuration","title":"Linux Kernel Configuration","text":"<p>By modifying the GPU settings, the CPU gains frequency scaling capabilities. However, the Linux kernel has its own control mechanisms, which by default lock the CPU frequency at 100MHz.</p> <p>You can check the current, maximum, and minimum CPU frequencies using the following commands:</p> <ul> <li>Current CPU frequency:   <code>cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq</code></li> <li>Maximum CPU frequency:   <code>cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq</code></li> <li>Minimum CPU frequency:   <code>cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq</code></li> </ul> <p>The Linux kernel includes a CPU frequency governor that determines how frequency changes occur. By default, Raspbian uses the <code>powersave</code> governor.</p> <p>Available governors: - <code>performance</code>: Always runs at the maximum CPU frequency. - <code>powersave</code>: Always runs at the minimum CPU frequency. - <code>ondemand</code>: Adjusts frequency based on CPU load (Raspbian toggles between min and max only). - <code>conservative</code>: Smoothly adjusts frequency based on CPU load. - <code>userspace</code>: Allows user-space daemons to control the CPU frequency.</p> <p>These settings can be changed during runtime via sysfs:</p> <pre><code>echo ondemand &gt; /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\n</code></pre> <p>To make this setting persist after reboot, there are two options:</p> <ol> <li>Adding the command to <code>/etc/rc.local</code></li> <li> <p>This method executes the command after the kernel boots, which may result in a longer boot time.</p> </li> <li> <p>Enabling kernel configuration options:</p> </li> <li>Enable the following kernel options:      <code>CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND      CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE</code></li> <li>This method requires rebuilding the kernel but ensures full CPU power during boot.</li> </ol> <p>After these settings are applied, you should observe CPU frequency changes based on system load. Give it a try!</p>"},{"location":"how_to_create_docker_image_of_raspbian/","title":"How to Create Docker Image of Raspbian","text":"<p>This guide explains how to create a Docker image for Raspbian on Ubuntu/Debian.</p>"},{"location":"how_to_create_docker_image_of_raspbian/#preparation","title":"Preparation","text":"<p>First, download the Raspbian OS image and unzip it:</p> <pre><code>wget https://downloads.raspberrypi.com/raspios_lite_armhf/images/raspios_lite_armhf-2024-11-19/2024-11-19-raspios-bookworm-armhf-lite.img.xz\nunzip 2024-11-19-raspios-bookworm-armhf-lite.img.xz\n</code></pre>"},{"location":"how_to_create_docker_image_of_raspbian/#inspect-the-os-image","title":"Inspect the OS Image","text":"<p>Use <code>fdisk</code> to inspect the image and identify partitions. We need Sector size and Start Sector of second image for mount. </p> <pre><code>$ sudo fdisk --list 2024-11-19-raspios-bookworm-armhf-lite.img\nDisk 2024-11-19-raspios-bookworm-armhf-lite.img: 2.38 GiB, 2550136832 bytes, 4980736 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x57b902f5\n\nDevice                                      Boot   Start     End Sectors  Size Id Type\n2024-11-19-raspios-bookworm-armhf-lite.img1         8192 1056767 1048576  512M  c W95 FAT32 (LBA)\n2024-11-19-raspios-bookworm-armhf-lite.img2      1056768 4980735 3923968  1.9G 83 Linux\n</code></pre>"},{"location":"how_to_create_docker_image_of_raspbian/#mount-and-create-docker-image","title":"Mount and Create Docker Image","text":"<pre><code>mkdir image\nsudo mount -o loop,offset=$((512*1056768)) 2024-11-19-raspios-bookworm-armhf-lite.img image\ncd image\nsudo tar cf ../docker-image-2024-11-19-raspios-bookworm-armhf-lite.tar .\n</code></pre> <p>Import the archive as a Docker image:</p> <pre><code>docker import docker-image-2024-11-19-raspios-bookworm-armhf-lite.tar raspios-bookworm-armhf-lite:2024-11-19\n</code></pre> <p>Check if the image is registered:</p> <pre><code>docker image list\n</code></pre>"},{"location":"how_to_create_docker_image_of_raspbian/#install-qemu","title":"Install qemu","text":"<p>If your host is x86_64, enable ARM emulation:</p> <pre><code>sudo apt-get -y install qemu-user-static\n</code></pre>"},{"location":"how_to_create_docker_image_of_raspbian/#running-the-docker-image","title":"Running the Docker Image","text":"<p>Run the container:</p> <pre><code>docker run -it raspios-bookworm-armhf-lite:2024-11-19 /bin/bash\nuname -a\nLinux f5f38b46dc55 6.1.0-31-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.128-1 (2025-02-07) armv7l GNU/Linux\n</code></pre>"},{"location":"how_to_create_docker_image_of_raspbian/#summary","title":"Summary","text":"<p>This guide outlines creating a Docker image from a Raspbian image, importing it into Docker, and running it with QEMU emulation on non-ARM hosts.</p>"},{"location":"how_to_move_rootfs_to_external_usb/","title":"How to move rootfs to external USB storage","text":"<p>This guide explains how to move the root filesystem (rootfs) of a Raspberry Pi running Bookworm to an external USB storage device.</p>"},{"location":"how_to_move_rootfs_to_external_usb/#1-prepare-your-external-usb-storage","title":"1. Prepare Your External USB Storage","text":"<pre><code>sudo fdisk /dev/sdX\n# Create a new partition (type Linux) and format it\nsudo mkfs.ext4 /dev/sdX1\n</code></pre>"},{"location":"how_to_move_rootfs_to_external_usb/#2-mount-the-usb-storage","title":"2. Mount the USB Storage","text":"<pre><code>sudo mkdir /mnt/usb\nsudo mount /dev/sdX1 /mnt/usb\n</code></pre>"},{"location":"how_to_move_rootfs_to_external_usb/#3-copy-rootfs-to-usb","title":"3. Copy RootFS to USB","text":"<pre><code>sudo rsync -aAXv / --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\"} /mnt/usb\n</code></pre>"},{"location":"how_to_move_rootfs_to_external_usb/#4-modify-boot-configuration","title":"4. Modify Boot Configuration","text":"<pre><code>sudo nano /boot/cmdline.txt\n</code></pre> <p>Change the <code>root=</code> parameter to point to your USB device, e.g., <code>root=/dev/sdX1</code>.</p>"},{"location":"how_to_move_rootfs_to_external_usb/#5-reboot-the-raspberry-pi","title":"5. Reboot the Raspberry Pi","text":"<pre><code>sudo sync\nsudo reboot\n</code></pre> <p>Your Raspberry Pi should now boot from the external USB storage.</p>"},{"location":"how_to_use_zram/","title":"Optimizing Swap with ZRAM on Raspbian","text":"<p>By default, Raspbian uses a swap file on the SD card, which can reduce performance and shorten the card's lifespan. ZRAM is a solution that creates a compressed swap partition in RAM, improving both performance and longevity.</p>"},{"location":"how_to_use_zram/#disable-default-swap-setting","title":"Disable Default Swap Setting","text":"<pre><code>sudo apt-get install chkconfig\nsudo chkconfig dphys-swapfile off\n</code></pre>"},{"location":"how_to_use_zram/#enable-swap-on-zram","title":"Enable Swap on ZRAM","text":"<ol> <li>Load the ZRAM module:</li> </ol> <pre><code>sudo modprobe zram\n</code></pre> <ol> <li>Set a 128MB ZRAM swap space:</li> </ol> <pre><code>echo $((128*1024*1024)) | sudo tee /sys/zram0/disksize\n</code></pre> <ol> <li>Create and enable the swap:</li> </ol> <pre><code>sudo mkswap /dev/zram0\nsudo swapon -p 10 /dev/zram0\n</code></pre> <p>With ZRAM enabled, your Raspberry Pi will benefit from faster swap performance and reduced SD card wear.</p> <p>Enjoy optimizing your Raspberry Pi!</p>"},{"location":"power_saving_on_raspbian/","title":"Power Saving on Raspbian","text":"<p>Raspbian allows you to optimize settings for better power efficiency. This guide focuses on methods to reduce energy consumption, making your Raspberry Pi more efficient for battery-powered or always-on projects.</p>"},{"location":"power_saving_on_raspbian/#check-current-cpu-frequency","title":"Check Current CPU Frequency","text":"<pre><code>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq\n</code></pre>"},{"location":"power_saving_on_raspbian/#set-cpu-governor-to-powersave","title":"Set CPU Governor to 'powersave'","text":"<pre><code>sudo cpufreq-set -g powersave\n</code></pre>"},{"location":"power_saving_on_raspbian/#set-maximum-cpu-frequency","title":"Set Maximum CPU Frequency","text":"<pre><code>sudo cpufreq-set -u 600000\n</code></pre>"},{"location":"power_saving_on_raspbian/#disable-hdmi-to-save-power","title":"Disable HDMI to Save Power","text":"<pre><code>sudo /usr/bin/tvservice -o\n</code></pre>"},{"location":"power_saving_on_raspbian/#turn-off-unused-usb-devices","title":"Turn Off Unused USB Devices","text":"<pre><code>echo '1-1' | sudo tee /sys/bus/usb/drivers/usb/unbind\n</code></pre>"},{"location":"power_saving_on_raspbian/#reduce-gpu-memory-allocation","title":"Reduce GPU Memory Allocation","text":"<pre><code>sudo nano /boot/config.txt\n# Add or modify:\ngpu_mem=16\n</code></pre> <p>Applying these settings can significantly reduce power consumption, ideal for headless setups or long-term operations.</p> <p>Happy optimizing your Raspberry Pi! \u26a1</p>"},{"location":"static-ip-configuration/","title":"Static IP Configuration on Raspbian (Bookworm)","text":"<p>Setting a static IP address on Raspbian Bookworm ensures your Raspberry Pi always uses the same IP, simplifying remote access.</p>"},{"location":"static-ip-configuration/#1-open-the-networkmanager-configuration","title":"1. Open the NetworkManager Configuration","text":"<pre><code>sudo nmcli connection show\n</code></pre>"},{"location":"static-ip-configuration/#2-modify-the-connection-to-set-a-static-ip","title":"2. Modify the Connection to Set a Static IP","text":"<pre><code>sudo nmcli connection modify \"Wired connection 1\" ipv4.addresses 192.168.1.100/24\nsudo nmcli connection modify \"Wired connection 1\" ipv4.gateway 192.168.1.1\nsudo nmcli connection modify \"Wired connection 1\" ipv4.dns \"8.8.8.8 8.8.4.4\"\nsudo nmcli connection modify \"Wired connection 1\" ipv4.method manual\n</code></pre> <p>Replace <code>192.168.1.100</code> with your desired IP, and adjust the gateway and DNS settings as needed.</p>"},{"location":"static-ip-configuration/#3-save-and-apply-the-configuration","title":"3. Save and Apply the Configuration","text":"<pre><code>sudo nmcli connection up \"Wired connection 1\"\n</code></pre>"},{"location":"static-ip-configuration/#4-verify-the-static-ip","title":"4. Verify the Static IP","text":"<pre><code>ip addr show eth0\n</code></pre> <p>Check that the IP address matches your static configuration.</p> <p>Your Raspberry Pi is now set with a static IP address using NetworkManager! \ud83c\udf10</p>"}]}